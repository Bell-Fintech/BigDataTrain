/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.33
 * Generated at: 2017-08-30 23:11:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import com.eems.entity.*;
import java.sql.*;

public final class change_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("com.eems.entity");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf8\">\n");
      out.write("<title>设备篮</title>\n");
      out.write("\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("\t");
  
    //装载MySQL5.5的JDBC驱动  
    Class.forName("com.mysql.jdbc.Driver").newInstance();  
    //建立数据库连接  
    String url ="jdbc:mysql://localhost:3306/List?user=root&password=&characterEncoding=utf8";  
    Connection conn= DriverManager.getConnection(url);  
    PreparedStatement pstat = null;  
    ResultSet rs = null;  
      
    String sql = null;  
    String op = request.getParameter("op");  
      
    //将设备放入设备车  
    if (op.equals("add")){  
        //从设备库中取出所选购设备的数据  
        int id = Integer.parseInt(request.getParameter("id"));  
        String name=null,price=null;  
        sql = "select * from equipment where equipmentNo=?";  
        pstat = conn.prepareStatement(sql);  
        pstat.setInt(1,id);  
        rs = pstat.executeQuery();  
        if (rs.next()){  
        	    
            name = rs.getString("equipmentName").trim();  
            price = rs.getString("changeMoney").trim();  
        }  
        rs.close();  
        pstat.close();  
          
        //将所选购设备加入到设备车中  
        sql = "insert into cart values(?,?,?,?,?)";  
        pstat = conn.prepareStatement(sql); 
        pstat.setInt(1,id);
        pstat.setString(2,name);  
        pstat.setString(3,price);  
        pstat.setInt(4,1);  
        pstat.setString(5,price);  
        pstat.executeUpdate();  
        pstat.close();  
          
        //关闭数据库连接  
        conn.close();  
          
        //重定向到设备车页面  
        response.sendRedirect("cart.jsp");  
        
      
      //更改商品的数量  
        if (op.equals("update")){  
            int idupdate = Integer.parseInt(request.getParameter("id"));  
            int num = Integer.parseInt(request.getParameter("num"));  
            double priceupdate=Double.parseDouble(request.getParameter("price"));  
            sql = "update cart set num = ?, count = ? where id=?";  
            pstat = conn.prepareStatement(sql);  
            pstat.setInt(1,num);  
            pstat.setString(2,new Double(priceupdate*num).toString());  
            pstat.setInt(3,idupdate);  
            pstat.executeUpdate();  
            pstat.close();  
            //关闭数据库连接  
            conn.close();  
            //重定向到购物车页面 
            request.getRequestDispatcher("cart.jsp");
            //response.sendRedirect("cart.jsp");  
        }     
        //将设备退回到设备架(将设备从设备车中删除)  
        if (op.equals("del")){  
        	    int iddelete = Integer.parseInt(request.getParameter("id")); 
            sql = "delete from cart where id=?";  
            pstat = conn.prepareStatement(sql);  
            pstat.setInt(1,iddelete);  
            pstat.executeUpdate();  
            pstat.close();    
            //关闭数据库连接  
            conn.close();  
            //重定向到设备车页面  
            response.sendRedirect("./cart.jsp");  
        }  
        
        //清空设备车  
        if (op.equals("clear")){  
            sql = "delete from cart";  
            pstat = conn.prepareStatement(sql);  
            pstat.executeUpdate();  
            pstat.close();  
              
            //关闭数据库连接  
            conn.close();  
            //重定向到设备车页面  
            response.sendRedirect("./cart.jsp");  
        }  
          
    }   
    
      
    

      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
