package cn.lk.car.controller;

import java.io.File;
import java.io.IOException;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.multipart.MultipartFile;

import cn.lk.car.service.BrandService;
import cn.lk.car.service.ItemsService;
import zd.car.base.Page;
import zd.car.base.Pager;
import zd.car.bean.Brand;
import zd.car.bean.Items;
import zd.car.bean.User;
import zd.car.constant.SysConstant;

@Controller
@RequestMapping("/my")
public class MyAction {
	@Resource
	private ItemsService itemsService;
	@Resource
	private BrandService brandService;

	@RequestMapping("/myItems.shtml")
	public String myItems(Page page,Items items,HttpServletRequest request,int id) {
		if(page.getPager()==null){
			Pager pager=new Pager();
			page.setPager(pager);
		}
		items.setUserId(id);
		page.getPager().setPageSize(8);
		page.setT(items);
		List<Items> itemsList=itemsService.findByPageQuery(page);
		int totalRows=itemsService.findTotalRowsByPageQuery(page);
		page.setList(itemsList);
		page.setTotalRows(totalRows);
		request.setAttribute("page", page);
		return "myItems/myItems";
	}

	@RequestMapping("/toAddItems.shtml")
	public String toAddItems(HttpServletRequest request) {
		List<Brand> brandList = brandService.findAllBrand();
		request.setAttribute("brandList", brandList);
		return "myItems/addItems";
	}
	
	@RequestMapping("/addItems.shtml")
    public String addItems(MultipartFile file,Items items,HttpServletRequest request) throws Exception, IOException{
		String oldname=file.getOriginalFilename();
		String suffix=oldname.substring(oldname.lastIndexOf("."));
		long priffix=new Date().getTime();
		String newName=priffix+suffix;
		String realPath=SysConstant.REAL_PATH+newName;
		file.transferTo(new File(realPath));
		String path=SysConstant.UPLOAD_PATH+newName;
		items.setUrl(path);
		User user=(User)request.getSession().getAttribute("user");
		items.setUserId(user.getId());
		items.setCompanyId(user.getCompanyId());
		items.setStatus(0);
		Date now=new Date();
		items.setEditTime(now);
		items.setCreateTime(now);
		itemsService.insertSelective(items);
		return "commons/close";
	}
}
