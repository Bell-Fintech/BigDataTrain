1.关键字
	含义：就是被java赋予特殊含义的单词
	组成规则：全部小写
	注意事项：
		goto和const是作为保留字存在，在后续的JDK版本升级中可能提升为关键字
		在高级记事本或者高级开发工具中，关键字都会变色
2.标识符
	含义：就是给类，接口，变量，方法等起名字的字符序列
	组成规则：
		全部大小写字母
		全部的数字字符
		$和_
	注意事项：
		区分大小写
		不能以数字开头
		不能是java中的关键字
	命名规则：
		包：其实就是硬盘上的一个文件夹，是为了区分同名文件
			一般是以公司域名反转之后的前两位：www.edu360.cn->cn.edu360	www.baidu.com->com.baidu
			一个单词：全部小写	cn
			多个单词：全部小写，每个单词之间用"_"隔开	cn.edu360
		类和接口：
			一个单词：首字母大写	Person Order
			多个单词：每个单词的首字母都大写	InputStream OuputStream
		方法和变量：
			一个单词：全部小写	name
			多个单词：从第二个单词首字母开始大写	setName getName show equals
		常量：
			一个单词：全部大写	KEY
			多个单词：全部大写，多个单词之间用"_"隔开	USER_KEY
3.常量
	含义：就是程序在执行的过程中其值不可以发生改变的量
	分类：
		字面值常量
			字符串常量	就是用双引号括起来的内容	"abc"
			整数常量	所有的整数	12 -12
			小数常量	所有的小数	-12.12 12.4
			字符常量	用单引号括起来的内容 'a'
			布尔常量	它只有两个值，true，false
			空常量		null（数组时候会说）
		自定义常量(面向对象时候会说)
4.进制
	由来：最初的一个计算机电子元件只能表示两种状态，高电压和低电压分别表示通电和断电，然后分别用0和1表示；但是现实生活中有很多符号和语言需要表示
	仅仅使用两个状态是无法表示的，所以就用8个0和1表示一个单位，这个单位就是字节，8个0和1就叫做二进制；但是二进制表现形式太长，不方便记忆，所以最后
	又出现八进制，十进制，十六进制
	八进制：将一个二进制从右向左，三位一组合，左边不够就补0；然后将每组的数据转换成10进制，组合到一起就是八进制
	十六进制：键一个二进制从右向左，四位一组合，左边不够就补0；然后将每组的数据转换成10进制，组合到一起就是十六进制
	
	二进制：以0b开头，由0-1组成
	八进制：以0开头，由0-7组成
	十进制：默认就是十进制，由0-9组成
	十六进制：以0x开头，由0-f组成
	
	其他进制如何转换成十进制？
		位值：就是每一位上面的数值
		进制数：x进制，那进制数就是x
		次方：从右向左，从0开始编号，对应位上面的编号就是该位的次方
		将每一位上面的数值*进制数的次方之和就是十进制
	十进制如何转换成y进制？
		除以y直至商为零，余数反转
		
	一个整数如何在计算机中存储的？
		存储的方式都是补码的形式
	原码：就是将一个数转换成二进制，然后最高位表示符号位，用0表示正数，用1表示负数；其余位数表示数值位
	反码：正数的反码和原码一样；负数的反码是在原码的基础上全部取反，但是符号位除外
	补码：正数的补码和原码一样；负数的补码是在反码的基础上末尾+1
5.变量
	含义：其值在程序执行的过程中可以在一定范围之内发生改变的量
	定义格式：
		数据类型 变量名 = 初始化值;
	注意事项：
		变量必须赋初始化值才能被使用
		变量定义在哪一个大括号中，这个大括号就是这个吧变量的作用域，一个作用域不能同时定义两个同名的方法
		在一行可以同时定义多个相同类型的变量
6.数据类型
	java是强类型语言，针对每种数据都定义了对应的数据类型，为每种数据类型分配了不同的内存空间
	
	基本数据类型：数值型，布尔型，字符型
		整数型：byte,short,int,long
		小数型：float,double
		布尔型：boolean
		字符型：char
			字节	位数	默认值
	byte	1		8		0
	short	2		16		0
	int		4		32		0
	long	8		64		0
	float	4		32		0.0
	double	8		64		0.0
	char	2		16		''
	booelan 1		8		false
	引用数据类型：类，接口，数组。。
	
	默认的整数类型都是int类型的，如果想要声明成long类型，必须在数值的后面加l或者L
	默认的小数类型都是double类型的，如果想要声明成float，必须在数值的后面加f或者F

	数据类型之间的相互运算：
		boolean是不能和其他数据类型之间相互运算的
		运算的时候是从低精度向高精度转换的
		byte,short,char它们之间不能直接相互运算，而是提升精度为int类型之后再相互运算
		精度的转换顺序：byte,short,char->int->long->float->double
	
	数据类型的强制转换：
		目标数据类型 变量名 = (目标数据类型)(要被转换的值);

	数据类型和字符串做运算：
		表达式的执行顺序：从左向右
		任何数据类型和字符串做运算结果都是字符串
7.运算符
	算术运算符
		/：取的是商；两个整数之间做运算结果都是整数，如果想要得到小数；可以在除数或者被除数后面乘以1.0f
		%：取的是余数
		单独使用：
			前++和后++的结果都是一样的，都是使自身的值+1
			前--和后--的结果都是一样的，都是使自身的值-1
		参与运算：
			前++：先使自身的值+1，然后再参与运算
			后++：先参与运算，然后再使自身的值+1
			前--：先使自身的值-1，然后再参与运算
			后--：先参与运算，然后再使自身的值-1
	赋值运算符
		=为最基本的赋值运算符，然后又扩展了一些其他运算符
			+=,-=,*=,/=,%=
			a += b; -> a = (a的数据类型)(a+b);
		扩展赋值运算符隐含了强制类型转换
	关系表达式
		结果都是boolean类型的，要么是true，要么是false
		
		==：判断是否相等
		!=：判断是否不等于
		instanceof：判断数据是否是指定的类型(在后面数面向对象的时候说)
	逻辑运算符
		&和&&：无false则true，有false则false
		|和||：有true则true，无true则false
		&&和||具有短路效果，开发中更常用
		^：相同false，不同true
		!：非真即假，非假即真；当是奇数倍的时候结果相反值，偶数倍的值是它本身
	位运算符：都是对数值的补码进行操作的，然后操作完成之后再转换成原码的十进制表现形式输出
		左移：最高位被移除的直接丢弃，右边不够的补0
		右移：最高位是1就补1，是0就补0，右边被移除的直接丢弃
		针对正数的左移和右移几位就相当于乘以或者除以2的几次方
		
		异或：一个数值异或另外一个数值两次结果是它本身
		异或：相同取0，不同取1
	三目运算符
		关系表达式?表达式1:表达式2;
		执行流程：
		首先计算出关系表达式的值，看其结果是true还是false
		如果是true就执行表达式1，如果是false就执行表达式2
8.流程控制结构
	顺序结构：写在前面的代码就先执行，写在后面的代码就后执行
	选择结构：根据结果的不同，执行不同的代码
		if语句：
			if(关系表达式1){
				语句体1;
			}else if(关系表达式2){
				语句体2;
			}else if(关系表达式3){
				语句体3；
			}else if(关系表达式n){
				语句体n；
			}else{
				语句体n+1；
			}
		执行流程：
			计算出关系表达式1的值，看其结果是true还是false
			如果是true，则执行语句体1
			如果是false，计算出关系表达式2的值，看其结果是true还是false
			如果是true，则执行语句体2
			如果是false，计算出关系表达式3的值，看其结果是true还是false
			如果是true，如果是true，则执行语句体3
			如果是false，计算出关系表达式n的值，看其结果是true还是false
			如果是true，则执行语句体n
			如果是false，就说明所有的情况都不匹配，执行else里面的语句体n+1
		if语句注意事项：
			if语句里面括号的值只能是Boolean类型的
			if语句如果没大括号，默认可以控制一条语句体
			如果有分号就不要有大括号，如果有大括号就不要有分号
			
		switch语句：
			switch(表达式){
				case 常量值1:
					语句体1;
					break;
				case 常量值2:
					语句体2;
					break;
				case 常量值3
					语句体3;
					break;
				case 常量值n:
					语句体n;
					break;
				default:
					语句体n+1；
					break;
			}
		格式解析：
			switch：关键字，代表是选择结构分支语句
			表达式：取值为byte,short,int,char,long,String(JDK1.7)
			case：是匹配的意思，将表达式的值和常量值进行匹配的
			语句体：可以是一条或者多条语句，就是我们对应要做的事情
			break：结束整个switch语句
			default：相当于if语句里面的else，所有的case都不匹配就执行default里面的语句
		执行流程：
			首先计算出表达式的值，和case后面的常量值进行匹配，一旦匹配成功就执行对应的语句体，当遇到break或者执行到程序的默认switch语句才会结束；
			所有的case都不匹配那么就执行default里面的语句体
		注意事项：
			case后面的值只能是常量，不能是变量
			default和break可以省略吗？
				可以的，但是一般不建议省略
			case和default的顺序一定要有序吗？
				可以无序
			switch语句当遇到break或者程序自动执行到末尾才会结束
	
	if语句和switch语句的各自使用场景：
		if语句：
			当结果是booelan类型的场景
			更适合做范围的场景
			做固定值的判断
		switch语句：
			做范围的判断
			更适合做固定值的判断(java进行了优化，效率比if高)
			
	循环结构：当判断条件满足的情况下，可以反复执行某一段代码，这段代码就是循环体语句；当在合适的时候将判断条件改为false，从而结束整个循环
	
	四大组成：
		初始化语句：初始化数据，一般会初始化一个变量
		判断条件语句：判断这个变量是否满足指定的条件，如果满足，继续执行后面的步骤，如果不满足则结束循环
		循环体语句：就是我们要反复执行的代码
		控制条件语句：改变这个变量值，让循环在合适的时候结束
		
		for语句：
			for(初始化语句;判断条件语句;控制条件语句){
				循环体语句;
			}
		执行流程：
			A:执行初始化语句
			B:执行判断条件语句；看其结果是true还是false
				如果是false，结束for循环
				如果是true，继续执行C步骤
			C:执行循环体语句
			D:执行控制条件语句
			E:回到B步骤
		for循环注意事项：
			判断条件语句的结果只能是boolean类型的
			for循环后面如果没有大括号，默认只能控制一条语句
			如果有分号就没有大括号，如果有大括号就没有分号
		
		while语句：
			初始化语句;
			while(判断条件语句){
				循环体语句：
				控制条件语句：
			}
		执行流程：
			A:执行初始化语句
			B:执行判断条件语句，看其结果是true还是false
				如果是false，结束while一进阶
				如果是true，继续执行C步骤
			C:执行循环体语句
			D:执行控制条件语句
			E:回到B步骤
		
		for循环：更适合做固定范围内的循环
		while循环：更适合做未知范围的循环
		
		for和while：在初始化语句中的那个变量，如果用的是for循环，那么这个变量在for循环结束之后就无法访问，因为会被视为垃圾，等待着gc的回收；如果使用的是while
		循环，那么在while循环结束指挥，这个变量依然可以被使用
		
		do...while语句：
			初始化语句：
			do{
				循环体语句;
				控制条件语句;
			}while(判断条件语句);
		执行流程：
			A：执行初始化语句
			B：执行循环体语句
			C:执行控制条件语句
			D:执行判断条件语句，看其结果是true还是false
				如果是false，则结束循环
				如果是true，回到B步骤
				
		for，while，do...while语句各自使用场景：
			for语句和while语句：循环体语句只有在判断条件语句返回true的时候才能被执行
			do...while语句：循环体语句至少可以被执行一次
		
		do...while：当循环体语句至少要被执行一次时
		
9.跳转控制语句
	break：中断循环和switch语句，单独使用没有任何意义；
	continue：结束本次循环，直接开始下次循环；单独使用没有任何意义
	return：结束当前的方法；将返回值返回给调用者