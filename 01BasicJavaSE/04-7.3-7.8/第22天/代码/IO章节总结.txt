1.异常
	处理异常的方式
		try...catch...finally：当方法体内部可以自己处理这个异常时，后续代码想要继续云时
		throws：当方法体内部不能处理时，后续代码运行和不允许都可以时
	当父类的方法没有异常抛出时，子类重写该方法时，如果方法体内部有异常，只能使用try...catch进行处理
2.递归
	递归：就是方法体内部调用方法自身的一种现象
	注意事项：
		递归要有出口，不然就是死递归
		递归的次数不能太多，不然就是内存溢出，内存溢出就会导致程序crash
		构造方法不能递归
	定义递归：
		要找到出口
		要找到规律
3.IO流
	java设备之间要进行数据的传递，就是使用IO技术进行实现的
	IO流：
	字节流：
		字节读取流：InputStream：自定义一个容器读取字节数据
			FileInputStream：是从一个文件中读取字节数据
			BufferedInputStream：内部包含了一个缓冲区可以高效的读取字节数据
			ByteArrayInputStream：是从一个字节数组中读取字节数据的
		字节写出流：OutputStream
			FileOutputStream：将字节数据写出到一个文件中
			BufferedOutputStream：将字节数据先写到一个缓冲区中，然后刷新缓冲区的数据到文件中
				flush什么时候调用？
					当在流关闭之前就有一部分数据需要刷新出去时，可以调用flush方法强制刷新
			ByteArrayOutputStream：将字节数据写出到一个字节数组中
	编码表：就是字符对应数值的一张表，在开发中就用UTF-8
	字符流：
		字符读取流：Reader
			InputStreamReader：字节读取流+编码表
			FileReader：是对InputStreamReader的一个简写形式，它只能使用平台默认的编码读取字符
			BufferedReader：它有一个特有的方法，readLine可以一次直接读取一行.用这个字符缓冲流读取数据比普通的字符缓冲流效率低
		字符写出流：Writer
			OutputStreamWriter：字节写出流+编码表
			FileWriter:是对OutputStreamWriter的一个简写形式，它只能使用平台默认的编码写出字符
			BufferedWriter：它有一个特有的方法，newLine直接写出一个和平台相对于的换行分隔符
4.自定义MyScanner，试玩小游戏
			